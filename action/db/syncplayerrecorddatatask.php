<?php
/**
 * 同步游戏数据
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/3/22
 * Time: 9:58
 * @author Zhanghui
 */

class syncplayerrecorddatatask extends basicdatatask {


    public function __construct()
    {
        parent::__construct();
    }

    /**
     * 任务执行器
     * @param basicmysql $db
     * @param basicmodel|null $model
     * @param $param
     * @param $default
     * @throws Exception
     * @author Zhanghui
     */
    public function on_data_task(basicmysql $db, basicmodel $model = null, $param, $default)
    {
        $m_action = $this->m_action;
        $extra_actions = $this->get_extra_actions();

        if (in_array($m_action, $extra_actions)) {
            return $this->$m_action($db, $model, $param, $default);
        }

        return parent::on_data_task($db, $model, $param, $default); // TODO: Change the autogenerated stub
    }

    /**
     * 获取附加行为
     * @return array
     * @throws Exception
     * @author Zhanghui
     */
    protected function get_extra_actions()
    {
        // 附加行为配置数组
        $extra_actions = array(
            'check_db_and_tables',
            '_query_source_table_data',
            '_query_desk_info',
            '_writein_input_table',
            '_delete_source_table_data',
        );
        $flag = true;

        // 验证方法
        foreach ($extra_actions as $key=>$value) {
            if (empty($value) || !method_exists($this, $value)) {
                $flag = false;
                break;
            }
        }

        if (!$flag) {
            throw new Exception('undefined method in extra_action...');
        }

        return $extra_actions;
    }

    /**
     * 验证数据库和表
     * @param basicmysql $db
     * @param basicmodel|null $model
     * @param $param
     * @param $default
     * @return bool
     * @throws Exception
     * @author Zhanghui
     */
    protected function check_db_and_tables(basicmysql $db, basicmodel $model = null, $param, $default)
    {
        array_walk_recursive($param, function (&$item) {
            $item = trim($item, '`');
        });

        $source_db = $param['source_db'];
        $input_db = $param['input_db'];
        $source_table_list = $param['source_table_list'];
        $input_table_list = $param['input_table_list'];
        $flag_db_source = $flag_db_input = false;
        $source_table_slice_list = $input_table_slice_list = array();

        $sql_dbs = "SHOW DATABASES";
        $sql_tables = "SHOW TABLES";

        // 验证数据库是否存在
        $result_db = $db->find($sql_dbs);
        if (!$result_db) {
            throw new Exception('数据库异常！');
        }

        foreach ($result_db as $key=>$value) {
            if ($value['Database'] == $source_db) {
                $flag_db_source = true;
            }

            if ($value['Database'] == $input_db) {
                $flag_db_input = true;
            }
        }

        if (!$flag_db_source || !$flag_db_input) {
            throw new Exception('源数据库或写入数据库不存在，请检查配置！');
        }

        // 验证源数据表
        $sql = "USE ".$source_db;
        $db->query($sql);
        $result_source_tables = $db->find($sql_tables);
        if (!$result_source_tables) {
            throw new Exception('源数据表异常！');
        }

        foreach ($result_source_tables as $key=>$value) {
            foreach ($source_table_list as $table_key=>$table_value) {
                if ($value['Tables_in_'.$source_db] == $table_value) {
                    $source_table_slice_list[] = $table_value;
                }
            }
        }

        if (count($source_table_slice_list) != count($source_table_list)) {
            throw new Exception('源数据表不匹配或不存在！');
        }

        // 验证写入数据表
        $sql = "USE ".$input_db;
        $db->query($sql);
        $result_input_tables = $db->find($sql_tables);
        if (!$result_input_tables) {
            throw new Exception('写入数据表异常！');
        }

        foreach ($result_input_tables as $key=>$value) {
            foreach ($input_table_list as $table_key=>$table_value) {
                if ($value['Tables_in_'.$input_db] == $table_value) {
                    $input_table_slice_list[] = $table_value;
                }
            }
        }

        if (count($input_table_slice_list) != count($input_table_list)) {
            throw new Exception('写入数据表不匹配或不存在！');
        }

        return true;
    }

    /**
     * 查询源数据表
     * @param basicmysql $db
     * @param basicmodel|null $model
     * @param $param
     * @param $default
     * @return array|bool
     * @throws Exception
     * @author Zhanghui
     */
    private function _query_source_table_data(basicmysql $db, basicmodel $model = null, $param, $default)
    {
        $table = $param['source_table'];
        $offset = $param['offset'];
        $length = $param['length'];
        $primary_field = $param['primary_field'];
        $where = "WHERE {$primary_field} > 0";
        $limit = "LIMIT {$offset},{$length}";

        $sql = "SELECT * FROM {$table} {$where} {$limit}";

        try {
            $result = $db->find($sql);
        } catch (Exception $e) {
            BASIC_EXCEPTION_HANDLER($e);
            throw new Exception(actionerror::$basicmysql_exception_error);
        }


        return $result;
    }

    /**
     * 查询桌子信息
     * @param basicmysql $db
     * @param basicmodel|null $model
     * @param $param
     * @param $default
     * @return array|bool
     * @throws Exception
     * @author Zhanghui
     */
    private function _query_desk_info(basicmysql $db, basicmodel $model = null, $param, $default)
    {
        $table_club_desk = $param['table_club_desk'];
        $table_club_desk_record = $param['table_club_desk_record'];
        $desk_id_str = implode(',', $param['source_desk_id_list']);

        // 优先查询俱乐部信息日志表($table_club_desk_record)
        $where = "WHERE `club_desk_id` IN({$desk_id_str})";
        $sql_club_desk_record = "SELECT * FROM {$table_club_desk_record} {$where}";

        try {
            $desk_list = $db->find($sql_club_desk_record);
        } catch (Exception $e) {
            BASIC_EXCEPTION_HANDLER($e);
            throw new Exception(actionerror::$basicmysql_exception_error);
        }
        $count_club_desk_record = count($desk_list);

        // 若俱乐部信息日志表查询的数据缺少(与桌子ID列表数据不一致) 则查询俱乐部信息表($table_club_desk)
        if ($count_club_desk_record != count($param['source_desk_id_list'])) {

            // 若俱乐部信息日志表查询的数据不为空 则取出剩余的桌子ID
            if ($count_club_desk_record != 0) {
                $exist_desk_id_list = array();
                foreach ($desk_list as $key=>$value) {
                    $exist_desk_id_list[] = $value['club_desk_id'];
                }
                $diff_desk_id_list = array_diff($param['desk_id_list'], $exist_desk_id_list);
                $desk_id_str = implode(',', $diff_desk_id_list);
            }

            $where = "WHERE `club_desk_id` IN({$desk_id_str})";
            $sql_club_desk = "SELECT * FROM {$table_club_desk} {$where}";

            try {
                $desk_list_supply = $db->find($sql_club_desk);
            } catch (Exception $e) {
                BASIC_EXCEPTION_HANDLER($e);
                throw new Exception(actionerror::$basicmysql_exception_error);
            }

            $desk_list = array_merge($desk_list, $desk_list_supply);
        }

        return $desk_list;
    }

    /**
     * 写入数据表
     * @param basicmysql $db
     * @param basicmodel|null $model
     * @param $param
     * @param $default
     * @return bool|mysqli_result
     * @author Zhanghui
     */
    private function _writein_input_table(basicmysql $db, basicmodel $model = null, $param, $default)
    {
        $table_input = $param['input_table'];
        $input_insert_data = $param['input_insert_data'];
        $default_return = false;
        $values = "";

        foreach ($input_insert_data as $key=>$value) {
            $now = time();
            $values .= "(NULL,{$value['record_bak_club_id']},{$value['record_bak_club_room_id']},{$value['record_bak_club_room_desk_no']},{$value['record_bak_game_id']},{$value['record_bak_room_id']},{$value['record_bak_room_no']},{$value['record_bak_desk_id']},{$value['record_bak_desk_no']},{$value['record_bak_player_id']},'{$value['record_bak_file']}',{$now}),";
        }

        if ($values) {
            $values = rtrim($values, ',');
            $sql = "INSERT INTO {$table_input} VALUES {$values}";

            try {
                $result = $db->query($sql);
            } catch (Exception $e) {
                BASIC_EXCEPTION_HANDLER($e);
            }

            return $result;
        }

        return $default_return;
    }

    /**
     * 删除源数据表数据
     * @param basicmysql $db
     * @param basicmodel|null $model
     * @param $param
     * @param $default
     * @return bool|mysqli_result
     * @author Zhanghui
     */
    private function _delete_source_table_data(basicmysql $db, basicmodel $model = null, $param, $default)
    {
        $table_source = $param['source_table'];
        $delete_source_id_list = array_keys($param['delete_source_desk_id_list']);
        $delete_source_id_str = implode(',', $delete_source_id_list);

        $where = "WHERE `id` IN($delete_source_id_str)";
        $sql = "DELETE FROM {$table_source} {$where}";

        try {
            $result = $db->query($sql);
        } catch (Exception $e) {
            BASIC_EXCEPTION_HANDLER($e);
        }

        return $result;
    }
}